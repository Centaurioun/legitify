// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/opa/opa_engine/engine.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	opa_engine "github.com/Legit-Labs/legitify/internal/opa/opa_engine"
	gomock "github.com/golang/mock/gomock"
	ast "github.com/open-policy-agent/opa/ast"
)

// MockEnginer is a mock of Enginer interface.
type MockEnginer struct {
	ctrl     *gomock.Controller
	recorder *MockEnginerMockRecorder
}

// MockEnginerMockRecorder is the mock recorder for MockEnginer.
type MockEnginerMockRecorder struct {
	mock *MockEnginer
}

// NewMockEnginer creates a new mock instance.
func NewMockEnginer(ctrl *gomock.Controller) *MockEnginer {
	mock := &MockEnginer{ctrl: ctrl}
	mock.recorder = &MockEnginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnginer) EXPECT() *MockEnginerMockRecorder {
	return m.recorder
}

// Annotations mocks base method.
func (m *MockEnginer) Annotations() *ast.AnnotationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotations")
	ret0, _ := ret[0].(*ast.AnnotationSet)
	return ret0
}

// Annotations indicates an expected call of Annotations.
func (mr *MockEnginerMockRecorder) Annotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotations", reflect.TypeOf((*MockEnginer)(nil).Annotations))
}

// Modules mocks base method.
func (m *MockEnginer) Modules() map[string]*ast.Module {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modules")
	ret0, _ := ret[0].(map[string]*ast.Module)
	return ret0
}

// Modules indicates an expected call of Modules.
func (mr *MockEnginerMockRecorder) Modules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modules", reflect.TypeOf((*MockEnginer)(nil).Modules))
}

// Namespaces mocks base method.
func (m *MockEnginer) Namespaces() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Namespaces indicates an expected call of Namespaces.
func (mr *MockEnginerMockRecorder) Namespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockEnginer)(nil).Namespaces))
}

// Query mocks base method.
func (m *MockEnginer) Query(ctx context.Context, namespace string, input interface{}) ([]opa_engine.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, namespace, input)
	ret0, _ := ret[0].([]opa_engine.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockEnginerMockRecorder) Query(ctx, namespace, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockEnginer)(nil).Query), ctx, namespace, input)
}

// SetTracing mocks base method.
func (m *MockEnginer) SetTracing(enabled bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTracing", enabled)
}

// SetTracing indicates an expected call of SetTracing.
func (mr *MockEnginerMockRecorder) SetTracing(enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTracing", reflect.TypeOf((*MockEnginer)(nil).SetTracing), enabled)
}
